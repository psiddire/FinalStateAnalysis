'''

Class which figures out the correct PU weight.
Takes as input a MC PU tag (i.e. 'S7') and a set of .root files with the
pileup distributions (generated by pileupCalc.py [1])

[1] https://twiki.cern.ch/twiki/bin/view/CMS/PileupJSONFileforData

Author: Evan K. Friis, UW

'''

import array
from FinalStateAnalysis.Utilities.FileInPath import FileInPath
import ROOT
from rootpy.io import root_open
# MC distributions (built at bottom of file)
_MC_PU_DISTRIBUTIONS = {}

class PileupWeight(object):
    def __init__(self, mctag, *datafiles):
        '''
        Build a PU weight object.

        [mctag] must reflect the PU distribution used in simulation and
        currently be either 'S6' or 'S10'.

        [datafiles] is a list of .root files generated a la

        https://twiki.cern.ch/twiki/bin/view/CMS/PileupJSONFileforData

        Note that for 7TeV data there must be 500 bins (0-50) and for 8TeV there
        should 600 bins (0-60)

        '''
        ROOT.TH1.AddDirectory(False)
        self.mc = None
        self.data = None
        
        for filename in datafiles:
            file = ROOT.TFile.Open(filename)
            pu = file.Get('pileup')
            if self.data is None:
                self.data = pu.Clone()
                self.data.SetDirectory(0)
            else:
                self.data.Add(pu)
            file.Close()
        # Normalize
        self.data.Scale(1./self.data.Integral())
        #print 'scaling data'
        if not mctag in _MC_PU_DISTRIBUTIONS:
            raise KeyError("Unknown PU distribution %s, allowed: %s" %
                           (mctag, " ".join(_MC_PU_DISTRIBUTIONS.keys())))
        mc_file = ROOT.TFile.Open(_MC_PU_DISTRIBUTIONS[mctag])
        if not mc_file:
            raise IOError("Can't open %s MC file: %s" % (mctag, _MC_PU_DISTRIBUTIONS[mctag]))

        mc_base = mc_file.Get('pileup')
        self.mc = mc_base.Clone()
        self.mc.SetName('pileup_mc')
        
        # Make sure bins are consistent
        if not ROOT.TEfficiency.CheckBinning(self.mc, self.data):
            error = "Data and MC PU histograms do not have the same binning!\n"
            def print_bins(tag, x):
                return "%s: (%i, %0.1f, %0.1f)" % (
                    tag, x.GetNbinsX(), x.GetXaxis().GetXmin(),
                    x.GetXaxis().GetXmax())
            error += print_bins(mctag, self.mc)
            error += "\n"
            error += print_bins('data', self.data)
            raise ValueError(error)
       # Normalize MC
        self.mc.Scale(1./self.mc.Integral())
        ROOT.TH1.AddDirectory(True)
        
    def __call__(self, ntruepu):
        '''
        Get the PU weight given the true number of interactions
        '''
        bin = self.data.FindBin(ntruepu)
        data = self.data.GetBinContent(bin)
        mc = self.mc.GetBinContent(bin)
        if mc:
            return data/mc
        else:
            return 1.0

_MC_PU_DISTRIBUTIONS['DY'] = FileInPath("FinalStateAnalysis/TagAndProbe/data/PU/pileupDY.root").full_path()
_MC_PU_DISTRIBUTIONS['DY1'] = FileInPath("FinalStateAnalysis/TagAndProbe/data/PU/pileupDY1.root").full_path()
_MC_PU_DISTRIBUTIONS['DY2'] = FileInPath("FinalStateAnalysis/TagAndProbe/data/PU/pileupDY2.root").full_path()
_MC_PU_DISTRIBUTIONS['DY3'] = FileInPath("FinalStateAnalysis/TagAndProbe/data/PU/pileupDY3.root").full_path()
_MC_PU_DISTRIBUTIONS['DY4'] = FileInPath("FinalStateAnalysis/TagAndProbe/data/PU/pileupDY4.root").full_path()
_MC_PU_DISTRIBUTIONS['DY10'] = FileInPath("FinalStateAnalysis/TagAndProbe/data/PU/pileupDY10.root").full_path()
_MC_PU_DISTRIBUTIONS['W'] = FileInPath("FinalStateAnalysis/TagAndProbe/data/PU/pileupW.root").full_path()
_MC_PU_DISTRIBUTIONS['W1'] = FileInPath("FinalStateAnalysis/TagAndProbe/data/PU/pileupW1.root").full_path()
_MC_PU_DISTRIBUTIONS['W2'] = FileInPath("FinalStateAnalysis/TagAndProbe/data/PU/pileupW2.root").full_path()
_MC_PU_DISTRIBUTIONS['W3'] = FileInPath("FinalStateAnalysis/TagAndProbe/data/PU/pileupW3.root").full_path()
_MC_PU_DISTRIBUTIONS['W4'] = FileInPath("FinalStateAnalysis/TagAndProbe/data/PU/pileupW4.root").full_path()
_MC_PU_DISTRIBUTIONS['WG'] = FileInPath("FinalStateAnalysis/TagAndProbe/data/PU/pileupWG.root").full_path()
_MC_PU_DISTRIBUTIONS['WW'] = FileInPath("FinalStateAnalysis/TagAndProbe/data/PU/pileupWW.root").full_path()
_MC_PU_DISTRIBUTIONS['WZ'] = FileInPath("FinalStateAnalysis/TagAndProbe/data/PU/pileupWZ.root").full_path()
_MC_PU_DISTRIBUTIONS['ZZ'] = FileInPath("FinalStateAnalysis/TagAndProbe/data/PU/pileupZZ.root").full_path()
_MC_PU_DISTRIBUTIONS['Wminus'] = FileInPath("FinalStateAnalysis/TagAndProbe/data/PU/pileupEWKWminus.root").full_path()
_MC_PU_DISTRIBUTIONS['Wplus'] = FileInPath("FinalStateAnalysis/TagAndProbe/data/PU/pileupEWKWplus.root").full_path()
_MC_PU_DISTRIBUTIONS['Zll'] = FileInPath("FinalStateAnalysis/TagAndProbe/data/PU/pileupEWKZll.root").full_path()
_MC_PU_DISTRIBUTIONS['Znunu'] = FileInPath("FinalStateAnalysis/TagAndProbe/data/PU/pileupEWKZnunu.root").full_path()
_MC_PU_DISTRIBUTIONS['STtantitop'] = FileInPath("FinalStateAnalysis/TagAndProbe/data/PU/pileupSTtantitop.root").full_path()
_MC_PU_DISTRIBUTIONS['STttop'] = FileInPath("FinalStateAnalysis/TagAndProbe/data/PU/pileupSTttop.root").full_path()
_MC_PU_DISTRIBUTIONS['STtWantitop'] = FileInPath("FinalStateAnalysis/TagAndProbe/data/PU/pileupSTtWantitop.root").full_path()
_MC_PU_DISTRIBUTIONS['STtWtop'] = FileInPath("FinalStateAnalysis/TagAndProbe/data/PU/pileupSTtWtop.root").full_path()
_MC_PU_DISTRIBUTIONS['TTTo2L2Nu'] = FileInPath("FinalStateAnalysis/TagAndProbe/data/PU/pileupTTTo2L2Nu.root").full_path()
_MC_PU_DISTRIBUTIONS['TTToHadronic'] = FileInPath("FinalStateAnalysis/TagAndProbe/data/PU/pileupTTToHadronic.root").full_path()
_MC_PU_DISTRIBUTIONS['TTToSemiLeptonic'] = FileInPath("FinalStateAnalysis/TagAndProbe/data/PU/pileupTTToSemiLeptonic.root").full_path()
_MC_PU_DISTRIBUTIONS['VBFHMT'] = FileInPath("FinalStateAnalysis/TagAndProbe/data/PU/pileupVBFHMT.root").full_path()
_MC_PU_DISTRIBUTIONS['VBFHTT'] = FileInPath("FinalStateAnalysis/TagAndProbe/data/PU/pileupVBFHTT.root").full_path()
_MC_PU_DISTRIBUTIONS['GGHMT'] = FileInPath("FinalStateAnalysis/TagAndProbe/data/PU/pileupGGHMT.root").full_path()
_MC_PU_DISTRIBUTIONS['GGHTT'] = FileInPath("FinalStateAnalysis/TagAndProbe/data/PU/pileupGGHTT.root").full_path()
_MC_PU_DISTRIBUTIONS['ZHTT'] = FileInPath("FinalStateAnalysis/TagAndProbe/data/PU/pileupZHTT.root").full_path()
_MC_PU_DISTRIBUTIONS['ttH'] = FileInPath("FinalStateAnalysis/TagAndProbe/data/PU/pileupttH.root").full_path()
_MC_PU_DISTRIBUTIONS['WminusHTT'] = FileInPath("FinalStateAnalysis/TagAndProbe/data/PU/pileupWminusHTT.root").full_path()
_MC_PU_DISTRIBUTIONS['WplusHTT'] = FileInPath("FinalStateAnalysis/TagAndProbe/data/PU/pileupWplusHTT.root").full_path()
_MC_PU_DISTRIBUTIONS['QCD'] = FileInPath("FinalStateAnalysis/TagAndProbe/data/PU/pileupQCD.root").full_path()
_MC_PU_DISTRIBUTIONS['DYAMC'] = FileInPath("FinalStateAnalysis/TagAndProbe/data/PU/pileupDYAMC.root").full_path()
_MC_PU_DISTRIBUTIONS['WWW'] = FileInPath("FinalStateAnalysis/TagAndProbe/data/PU/pileupWWW.root").full_path()
_MC_PU_DISTRIBUTIONS['WWZ'] = FileInPath("FinalStateAnalysis/TagAndProbe/data/PU/pileupWWZ.root").full_path()
_MC_PU_DISTRIBUTIONS['WZZ'] = FileInPath("FinalStateAnalysis/TagAndProbe/data/PU/pileupWZZ.root").full_path()
_MC_PU_DISTRIBUTIONS['Wminusv2'] = FileInPath("FinalStateAnalysis/TagAndProbe/data/PU/pileupEWKWminusv2.root").full_path()
_MC_PU_DISTRIBUTIONS['Wplusv2'] = FileInPath("FinalStateAnalysis/TagAndProbe/data/PU/pileupEWKWplusv2.root").full_path()
_MC_PU_DISTRIBUTIONS['Zllv2'] = FileInPath("FinalStateAnalysis/TagAndProbe/data/PU/pileupEWKZllv2.root").full_path()
_MC_PU_DISTRIBUTIONS['Znunuv2'] = FileInPath("FinalStateAnalysis/TagAndProbe/data/PU/pileupEWKZnunuv2.root").full_path()
_MC_PU_DISTRIBUTIONS['GGHET'] = FileInPath("FinalStateAnalysis/TagAndProbe/data/PU/pileupGGHET.root").full_path()
_MC_PU_DISTRIBUTIONS['VBFHET'] = FileInPath("FinalStateAnalysis/TagAndProbe/data/PU/pileupVBFHET.root").full_path()
_MC_PU_DISTRIBUTIONS['GGHTTv2'] = FileInPath("FinalStateAnalysis/TagAndProbe/data/PU/pileupGGHTTv2.root").full_path()
_MC_PU_DISTRIBUTIONS['GGHEM'] = FileInPath("FinalStateAnalysis/TagAndProbe/data/PU/pileupGGHEM.root").full_path()
_MC_PU_DISTRIBUTIONS['VBFHEM'] = FileInPath("FinalStateAnalysis/TagAndProbe/data/PU/pileupVBFHEM.root").full_path()
